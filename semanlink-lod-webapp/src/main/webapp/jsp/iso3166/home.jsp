<%@ page    contentType="text/html;charset=UTF-8"  pageEncoding="UTF-8" language="java" session="true" import="net.semanlink.util.servlet.*, net.semanlink.lod.iso3166.*, java.net.*"%><style type="text/css">
<!--
.kod {
	font-family: "Courier New", Courier, mono;
	font-size: 12px;
	background-color: #FFFFCC;
	border: thin solid;
	margin-right: 80px;
	margin-left: 80px;
	margin-bottom: 12px;
	margin-top: 12px;
}
.kod p {
	margin-top: 2px;
	margin-bottom: 2px;
}
-->
</style>
<%
/*
 It seems that we need to encode the query twice if we want it to work
 when it contains diacritics. So,
 - if we use windows.location = url, we must call encodeURIComponent twice.
 - if we use the content of a GET form field, we must encode it once with encodeURIComponent, the 
 form enconding it once more
 
 sparql as rdf: the servlet calls the SPARQLEndpoint, which decodes once the "query"
 parameter of the request
 
 sparql as html: the servlet get the "query" param, encode it, and pass it to the html page that loads rdf,
 where it is written as in in the "onload" on the body tag
 
 But in fact, a single encoding works IF we do not use diacritics (decoding twice something encoding only one is no problem)
 That is, we can encode only once IF we encode the diacritics - that is, if we write "%C3%A9" instead of "é" in an input field.
 
*/String contextURL =  BasicServlet.getContextURL(request);
String sparqlURL = contextURL + "/iso3166/sparql/";%><h2>Publication of the ISO 3166 (country codes) as a semantic web service.</h2>
<p>Here is the content of the ISO 3166 norm published as RDF data, and accessible trough a SPARQL endpoint, which turns this data repository
into a service over HTTP. This means that the functionnalities available in this web application can also easily be used by a program.</p>
<p>In the rest of this page, we first give a description of thoses functionnalities.
We then explain the principles this service is built on: this acts as a short introduction to RDF.
Finally, links to documentation about RDF, SPARQL and related topics are listed.
<h2>Summary of the fonctionnalities</h2>
<h3>Right bar menu</h3>
<h4>Complete file</h4>
<p>The complete RDF file can be downloaded in either RDF/XML or RDF/N3 format. The content can also be displayed as HTML. See "Complete File"
in the right bar.</p>
<h4>Schema</h4>
<p>The RDF schema (that is, the definition of the RDF vocabulary used in describing the countries) is available as RDF/XML and can be displayed as HTML, see "Schema"
in the right bar</p>
<h4>Searching by code, by name</h4>
<p>Use the boxes in the right bar. You can enter any of the 3 kinds of codes in the "Code" field (2 or 3 alphanumeric characters,
or numeric code). For instance, "FR", "FRA" and 250 all return the same country, doulce France.</p>
<p>Search by name (either in English or French) with the "Search names" field. You can enter a partial name. The search is case unsensitive, but beware,
"é" and "e" are not considered equal.</p>
<p><b>Output</b> is available as RDF/XML, RDF/N3 and HTML.</p>
<h4>SPARQL endpoint</h4>
<p>Provides access to a page where one can learn how to use the repository from a program, and experiment SPARQL queries against the dataset. (More on that in the next paragraph).</p>
<h3>Service</h3>
<p>The requests to the data repository generated by the links and buttons of the right bar are standard HTTP GET requests 
(corresponding to URLs that can be fetched from a browser). The different types of queries (complete file, code search,
name search) can all get an answer as RDF data. This is very interesting, because RDF is machine understandable data:
an RDF parser is all what it needs to load it from its XML or N3 serialization form.
</p>
<p>This means that we have here a service over HTTP, the requests generated when clicking the "RDF/XML" (or "RDF/N3") buttons (that is the URLs displayed in the navigation bar of
the browser) matching its API. The service is in fact
more general than that, as it is a SPARQL endpoint above the ISO 3166 RDF dataset. Using the SPARQL endpoint is explained in the dedicated page (click the "SPARQL endpoint"
link in the right bar to get to it).
</p>
<h2>Principles</h2>
<p>RDF, RDF Schema and SPARQL are W3C (World Wide Web Consortium) recommendations, all related to the publication of data on the web and the creation
of a web of linked data (often called "semantic web"). As such, they are free and open standards very well suited to publish data repositories as easy to use services.</p>
<h3>RDF, SPARQL and Linked Data in 50 words or less</h3>
<p>RDF is the relational model brought to the web. It is a data model consisting of triples:<p>
<p>subject proprerty value.</p>
<p>It is a way to state things about "resources" (hence the RDF acronym: "Resource Description Framework"), a resource being anything that can be identified by an URI (~URL),
 that is, almost every kind of things: a web page, a person, a country, a spare part... 
</p>
<p>In fact, each item of an RDF triple has to be identified by an URI, except maybe
the last one (the value of the property), which can be an XML literal. For instance here is an RDF statement:</p>
<div class="kod"><p>&lt;<%=Iso3166Servlet.NS%>GBR&gt; &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;<%=Iso3166Servlet.SCHEMA_NS%>Country&gt;.</p></div>
<p>Before commenting this triple, and for the sake of clarity, we'll rewrite it using namespace notation, defining the prefixes: </p>
<div class="kod">
<p>PREFIX <%=Iso3166Servlet.SCHEMA_PREFIX%>: &lt;<%=Iso3166Servlet.SCHEMA_NS%>&gt;</p>
<p>PREFIX <%=Iso3166Servlet.PREFIX%>: &lt;<%=Iso3166Servlet.NS%>&gt;</p>
<p>PREFIX rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;</p></div>
<p>We can now write the same statement: </p>
<div class="kod"><p><%=Iso3166Servlet.PREFIX%>:GB rdf:type <%=Iso3166Servlet.SCHEMA_PREFIX%>Country .</p></div>
<p>rdf:type identifies one of the few properties specified by the W3C recommendation defining RDF, and its semantics
is "is an instance of" (a class). <%=Iso3166Servlet.SCHEMA_PREFIX%>Country is declared in the RDF schema
defining the vocabulary used to describe countries (wrt to ISO 3166 norm) and defines the class of countries (that is, something which has an ISO 3166 code.
Look at the schema to get more information).
<p>So, this triple states that the thing identified by <%=Iso3166Servlet.PREFIX%>:GBR is an instance of the class Country. Other statements, involving the same subject include:</p>
<div class="kod">
<p><%=Iso3166Servlet.PREFIX%>:GB <%=Iso3166Servlet.SCHEMA_PREFIX%>:alpha2 "GB" .</p>
<p><%=Iso3166Servlet.PREFIX%>:GB <%=Iso3166Servlet.SCHEMA_PREFIX%>:alpha3 "GBR" .</p>
<p><%=Iso3166Servlet.PREFIX%>:GB <%=Iso3166Servlet.SCHEMA_PREFIX%>:name "UNITED KINGDOM"@en .</p>
<p><%=Iso3166Servlet.PREFIX%>:GB <%=Iso3166Servlet.SCHEMA_PREFIX%>:name "ROYAUME UNI"@fr .</p>
</div>

<p>The whole content of the ISO 3166 norm has been written as such RDF statements, and has been made available trough this application.</p>
<p>A set of RDF statements can be serialized through various formats. One (defined in the W3C recommendation), encodes the triples as XML. Another one,
called N3, is a simpler syntax consisting essentially in writing the triples as text. The example above are written in N3. The application supports both syntaxes.</p>
<p>The important point is that a generic RDF parser allows to load the whole informational content of a serialized set of triples. No dedicated code is
required to fully understand the content.</p>
<p>RDF parsers (and frameworks) exist in most languages, including C, Java, Javascript and PHP</p>
<h3>Querying an RDF dataset with SPARQL</h3>
<p>RDF can be thought of as the relational model brought to the web. SPARQL is SQL for the web, and allows to make query against an RDF dataset. Returning data
as either XML or RDF, it is an easy and very versatile way to provide a service over a dataset. 
</p><p>
SPARQL was used to construct the search of codes or names in the ISO3166 dataset. The HTML pages for results are built upon the RDF service: they are generated
on the client side, using a javascript RDF parser to parse the results and display them.
</p>
       