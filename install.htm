<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"><html><head><title>Semanlink Install Instructions</title><meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><style type="text/css"><!--.example {	background-color: #CCCCCC;	margin: 20px;	border: 1px solid #999999;}--></style></head><body><h1>Install instructions</h1><h2>Warning, important note</h2><p>there is <strong>one special thing to do before running Semanlink  for the first time</strong>, (defining the &quot;context&quot; of the web application)  so <strong>please  read this file</strong>. (Tomcat users: you cannot just drop the semanlink.war  file in Tomcat's &quot;webapps&quot; directory.  Sorry for that but, when starting, Semanlink servlet needs to know some information  that cannot be guessed.)</p><h2><strong>Prerequesites</strong></h2><p>Semanlink is a web application. You MUST have a <strong>servlet engine</strong> installed  on your computer in order to use it. If you don't, you can download and install  Tomcat   (latest stable release recommended) from <a href="http://tomcat.apache.org/">http://tomcat.apache.org/</a>.</p><h2>Define the &quot;context&quot; of the web application</h2><p>Before running Semanlink, you MUST define the &quot;<strong>context</strong>&quot; of  the application, which include some special parameters that you have to specify.  (That's because  Semanlink needs to know, before starting, where you want to store the information  that you'll produce using it, and only you can decide). That's an easy process:<br>  The file called &quot;<strong>semanlink.xml</strong>&quot; (included at the first level of the  directory of the distribution) is a template for the definition of Semanlink'scontext. Three things need to be modified in the file:</p><ul>  <li> <strong>docBase</strong>: you MUST change the value given to docBase with    the absolute path to the semanlink WAR file (just replace the dummy value    'path-to-semanlink.war' with the actual one, for instance, on windows, something    such as 'C:\semanlink\semanlink.war')</li>  <li><strong>semanlinkURL</strong>: you MUST define the value of parameter &quot;semanlinkURL&quot; with    the URL where semanlink will be running. Note that semanlinkURL ends with    the value of the &quot;path&quot; attribute (&quot;/semanlink&quot;, unless you change it - these    instructions will suppose that you do not change this &quot;path&quot; attribute) (I    don't like to have to request to define this semanlinkURL parameter, but    it it is the root uri    of    a    lot of    resources    involved    in triples that semanlink save, using relative uris, in datafiles that are    loaded are startup - and servlet doesn't know the url where it is running    during its init. Better to have this value written only once than in a lot    of places)</li>  <li><strong>semanlinkDataDir</strong>: you MUST also set the parameter &quot;semanlinkDataDir&quot; to    the path to a directory where semanlink will store data. The servlet must    have permission    to write to this directory.</li></ul><p>Leave other data unchanged.</p><h3>Context definition examples</h3><p>All examples suppose that semanlink will be running at 127.0.0.1:8080/semanlink</p><h4>Mac OSX example</h4><p>Here in an example of context on Mac OSX. The user  has created a directory &quot;SemanlinkStuff&quot; inside her &quot;[short-username]&quot; directory  (replace &quot;[short-username]&quot; with  appropriate value). She has copied in this directory the &quot;semanlink.war&quot; file  from the unzipped distribution of semanlink (or she has  created a symbolic link to  it. Beware, an alias created with the Finder would'nt work). (Note that it  is a good idea to avoid having the version number of the release in the path  to the war file that gets stored in the context,  because  it makes  upgrading  to a newer  release  easier when  one   becomes available). Finally, she created inside the &quot;SemanlinkStuff&quot; directory  a subdirectory called dataDir to store she data  that she will be creating using Semanlink.</p><div class="example"><p>&lt;Context path=&quot;/semanlink&quot; docBase=&quot;/Users/[short-username]/SemanlinkStuff/semanlink.war&quot; reloadable=&quot;true&quot; debug=&quot;0&quot;&gt;</p><blockquote>  <p>&lt;Parameter name=&quot;semanlinkURL&quot; value=&quot;http://127.0.0.1:8080/semanlink&quot; override=&quot;false&quot;/&gt;</p>  <p>&lt;Parameter name=&quot;semanlinkDataDir&quot; value=&quot;/Users/[short-username]/SemanlinkStuff/dataDir&quot; override=&quot;false&quot;/&gt;</p></blockquote><p>&lt; /Context&gt;</p></div><h4>Other UNIX</h4><p>See Mac OSX example.</p><h4>Windows example</h4><p>Here in an example of context on Windows. The user has created on C: a directory  called &quot;SemanlinkStuff&quot;.  She has copied in this directory the &quot;semanlink.war&quot; file from the  unzipped distribution of semanlink (Note that it is a good idea to avoid having  the version number of the release in the path to the war file that gets stored  in the context, because it makes upgrading to a newer release easier when one  become available). Finally, she created inside the &quot;SemanlinkStuff&quot; directory  a subdirectory called dataDir to store she data that she will be creating usingSemanlink.</p><div class="example"><p>&lt;Context path=&quot;/semanlink&quot; docBase=&quot;C:\SemanlinkStuff\semanlink.war&quot; reloadable=&quot;true&quot; debug=&quot;0&quot;&gt;</p><blockquote>  <p>&lt;Parameter name=&quot;semanlinkURL&quot; value=&quot;http://127.0.0.1:8080/semanlink&quot; override=&quot;false&quot;/&gt;</p>  <p>&lt;Parameter name=&quot;semanlinkDataDir&quot; value=&quot;C:\SemanlinkStuff\dataDir&quot; override=&quot;false&quot;/&gt;</p></blockquote><p>&lt; /Context&gt;</p></div><p>(In these two examples, the directory containing semanlink program  has been renamed to &quot;semanlink&quot; without the version number, which  is probably a good idea when it comes to upgrading)</p><h2>Instruct your servlet engine to start semanlink with the context you justdefined</h2><h2>That's it!</h2><p>You're now ready to run Semanlink (instruct          your servlet engine to do so. You may have to restart it. With Tomcat,  you should be able to use the manager available from page at host:port). Point  your browser to http://127.0.0.1:8080/semanlink (if your running on localhost  at  port 8080).  Enjoy! </p></body></html>