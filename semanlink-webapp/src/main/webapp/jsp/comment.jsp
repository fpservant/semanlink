<!--comment.jsp--><%@ page language="java" session="true" import="net.semanlink.servlet.*,net.semanlink.semanlink.*,java.util.*"%><%@ taglib uri="http://struts.apache.org/tags-bean" prefix="bean" %><%@ taglib uri="http://struts.apache.org/tags-html" prefix="html" %><%@ taglib uri="http://struts.apache.org/tags-logic" prefix="logic" %><%Jsp_Resource jsp = (Jsp_Resource) request.getAttribute("net.semanlink.servlet.jsp");boolean edit = (Boolean.TRUE.equals(session.getAttribute("net.semanlink.servlet.edit")));SLResource x = jsp.getSLResource();String uri = x.getURI();String comment = x.getComment();if (comment == null) comment = "";// beware, comment can contain markdown or html (old way of storing formated content in sl:comment)// In both cases the "<" and ">" have been replaced by &lt; and &gt; in the rdf xml// They are converted back to "<" and ">" when we receive (that's what we see in JenaUtils.getComment())if (!edit) {		// The idea: we put the comment (typically markdown) inside a div,	// and once the page is loaded, js convert the markdown in place.	// pb : markdown may contain <http://www.a.com>    // which cannot be included as such inside a div.    //    // That's why I first put the raw comment inside a text area    // Then, in js, once the page is loaded, I convert this content to html    // (when it is md : else, it is already correct html)    // and replace the inner of the containg div with this html    // (removing the text area)	if ((comment != null) && (!("".equals(comment)))) {        %><div class="graybox"><div id= "slcomment" class="markdown" property="rdfs:comment"><textarea><%=comment%></textarea></div></div><%      	} // comment !null} else { // edit	String docorkw;	if (x instanceof net.semanlink.semanlink.SLDocument) {		docorkw = "doc";	} else {		docorkw =  "kw";	}	%>	    <script>        //    // PASTING URLs OF DOCS OR KWS INTO COMMENT FIELD    //        function createCommentEditor() {        var $ = function (id) { return document.getElementById(id); };        new Editor($("slcomment_raw"), $("slcomment_formatted"));    }            function mypaste() {        var selection = window.getSelection();        var paste = (event.clipboardData || window.clipboardData).getData('text');        var con = getContextURL();        if (!paste.startsWith(con + "/")) {        	return;        }        var isSpecialPaste = false        if (paste.startsWith(con + "/tag/")) {        	if (!paste.startsWith(con + "/tag/?")) { // sinon: cf and kws. Do not handle it here // TODO        		isSpecialPaste = true;        	}        } else if (paste.startsWith(con + "/doc/")) {            if (!paste.startsWith(con + "/doc/?")) { // sinon: old docs. Do not handle it here // TODO                isSpecialPaste = true;            }        }                if (isSpecialPaste) {         	mypasteSpecial(paste, event);            event.preventDefault(); // sinon collage du texte initial (en 1er)        }    }        function insertAtCursor (input, textToInsert) {        // ca ne marche pas bien        // var selection = window.getSelection();        // if (!selection.rangeCount) return false;        // selection.deleteFromDocument();        // selection.getRangeAt(0).insertNode(document.createTextNode(paste));        // get current text of the input        const value = input.value;        // save selection start and end position        const start = input.selectionStart;        const end = input.selectionEnd;        // update the value with our text inserted        input.value = value.slice(0, start) + textToInsert + value.slice(end);        // update cursor to be at the end of insertion        input.selectionStart = input.selectionEnd = start + textToInsert.length;    }           // if we paste a docUri, we want to insert [doc title](doc:shortDocUrl)    // docUrl assumed to be the uri of a doc: getContextUrl()/doc/20xx...    // To do that, we have to get the info about the doc        // to get the title of doc using ajax // 2020-11    /**	 * sends the request and set the innerHTML with the response	 */	 	var ieIE = false;    var copy_paste_req = false;    var pastedUrl = false;    var pastedText = false    // var pasteEvent = false;    	function mypasteSpecial(pastedSlUrl, event) { 	    pastedUrl = pastedSlUrl; // yes (no var)	    	    var url = false;        var con = getContextURL();        if (pastedUrl.startsWith(con + "/tag/")) {            url = pastedUrl + "?ppty=skos:prefLabel";        } else if (pastedUrl.startsWith(con + "/doc/")) {            url = pastedUrl + "?ppty=dc:title";                    } else {        	throw("Unexpected");        }	    if (pastedSlUrl.startsWith)	    // pasteEvent = event;	    if (window.ActiveXObject) { // IE	        isIE = true;	        copy_paste_req = new ActiveXObject("Microsoft.XMLHTTP");	        if (copy_paste_req) {	        	copy_paste_req.onreadystatechange = mypasteSpecialChange;	        	copy_paste_req.open("GET", url, true);	        	copy_paste_req.send();	        }	    } else if (window.XMLHttpRequest) { // Non-IE browsers	    	copy_paste_req = new XMLHttpRequest();	    	copy_paste_req.onreadystatechange = mypasteSpecialChange;	        try {	        	copy_paste_req.open("GET", url, true);	        } catch (e) {	            alert(e);	        }	        copy_paste_req.send(null);	    } else {	        alert("no ajax");	    }	}		// requires copy_paste_req, pastedUrl	function mypasteSpecialChange() {	    if (copy_paste_req.readyState == 4) { // Complete	        if (copy_paste_req.status == 200) { // OK response	            var paste = '[' + copy_paste_req.responseText + ']'                var con = getContextURL();	            var s = con + "/tag/";	        	if (pastedUrl.startsWith(s)) {	        		paste += '(tag:' + pastedUrl.substring(s.length) + ')';	        			            } else {	            	s = con + "/doc/";	            	if (pastedUrl.startsWith(s)) {	            		paste += '(doc:' + pastedUrl.substring(s.length) + ')';	            			            	} else {	                    throw("Unexpected");	                }	            }	            insertAtCursor(document.getElementById('slcomment_raw'), paste);	            // pasteEvent.preventDefault(); 	            // copy_paste_req = null; // comprends pas, mais sinon, plusieurs appels. Mais aussi, du coup, une erreur ici 	        } else {	            alert("Problem: " + copy_paste_req.status + " : " + copy_paste_req.statusText);	        }	    }	}                                </script>		    <%    jsp.addOnLoadEvents("createCommentEditor");    %>    <div class="graybox">        <div class="what"><%=jsp.i18l("x.comment")%></div>        <p></p> 			<html:form action="setcomment">				<html:hidden property="uri" value="<%=uri%>" />				<html:hidden property="docorkw" value="<%=docorkw%>" />				<textarea id="slcomment_raw" name="comment" cols="80" rows="5" 				    onpaste="mypaste()"				    oninput="this.editor.update()" ondrop="dropToComment(event)"><%=comment%></textarea>					<!-- html:hidden property="property" value="comment" / -->					<html:select property="lang">						<html:option value="-">-</html:option>						<html:option value="fr">fr</html:option>						<html:option value="en">en</html:option>						<html:option value="es">es</html:option>						<html:option value="pt">pt</html:option>					</html:select>					<html:submit property="<%=Action_SetOrAddProperty.SET%>"><%=jsp.i18l("x.setComment")%></html:submit>               			</html:form>						    <script>    const target = document.getElementById('slcomment_raw');    /*    target.addEventListener('paste', (event) => {        let paste = (event.clipboardData || window.clipboardData).getData('text');        var s = getContextURL() + "/tag/";        var doit = false;        if (paste.startsWith(s)) {            paste = 'tag:' + paste.substring(s.length);            doit = true;        } else {            s = getContextURL() + "/doc/";            if (paste.startsWith(s)) {                paste = 'doc:' + paste.substring(s.length);                doit = true;            }        }             if (doit) {            var selection = window.getSelection();            // alert(selection.rangeCount);            // if (!selection.rangeCount) return false;            selection.deleteFromDocument();            selection.getRangeAt(0).insertNode(document.createTextNode(paste));            event.preventDefault();                 }    });     */    /*    target.addEventListener('paste', (event) => {        let paste = (event.clipboardData || window.clipboardData).getData('text');        paste = paste.toUpperCase();             const selection = window.getSelection();        if (!selection.rangeCount) return false;        selection.deleteFromDocument();        selection.getRangeAt(0).insertNode(document.createTextNode(paste));        event.preventDefault();    });    */    </script>            <div id= "slcomment_formatted" class="markdown" property="rdfs:comment"></div>	</div>		<% // graybox} // edit or not%><!--/comment.jsp-->