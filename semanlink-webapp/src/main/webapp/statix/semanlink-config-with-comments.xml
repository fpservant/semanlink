<rdf:RDF    xmlns:sl="http://www.semanlink.net/2001/00/semanlink-schema#"    xmlns:slc="http://www.semanlink.net/2006/09/semanlink-config-schema#"    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">		<!--		This is a commented version of a semanlink-config.xml file,		to be used as a documentation about semanlink configuration.				The semanlink-config.xml file is the main configuration file 		of the semanlink servlet and the semanlink "datastore".		(This file is located in the directory defined by the "semanlinkDataDir" parameter		of the "context" of web application, see [distributionRootDirectory]/READ-ME.htm) 					*** GENERALITIES ***		All semanlink configuration is included in this semanlink-config.xml file,		EXCEPT the part included in the definition of the "context" of the web application		(cf [distributionRootDirectory]/READ-ME.htm):		- the url of the servlet		- and the path to the parent directory of this file (the "semanlinkDataDir")		*** MAIN PURPOSE OF THIS CONFIGURATION ***		The main purpose of semanlink-config.xml file is to declare:		- the thesauri (set of tags)		- and the "data folders" (the directories containing documents and their metadata).				*** WHEN AND HOW THIS FILE IS LOADED ***		This file is read by the servlet during its init.				*** IMPORTANT NOTE ***		When this file gets loaded by the semanlink servlet,		a base equal to the slash terminated url of servlet is used.		Uris relative to the servlet can therefore be used in the file.	-->					<!--	
		*** MAPPINGS ***			One frequent need is to map the URI of a file on your disk with its actual path.
		
		One of the primary use of Semanlink is to add metadata to files on your computer
		or on your web server. This metadata is typically stored is small rdf files ("sl.rdf") located in the same
		directory as the files they describe. Semanlink servlet must therefore be able
		- to write data to these directories (have write permission)
		- and to map the URL of a file to which metadata is added with the actual file in the file system.

		*** Mapping uris with files ***		There are several ways to define the file corresponding to a uri:				- with the slc:filePath property (expected values are absolute path to existing and writable).					- with the slc:pathRelativeToDataDir (expected value is a path relative to 		the directory defined in the the "semanlinkDataDir" context parameter		(that is, the directory containing this semanlink-config.xml file).		This is handy as directories described this way will be automatically created		if they don't exist.				- with the slc:fileURI property, whose value is a file-protocol URI.		Beware, such an URI MUST begin with file:/// (3 slashes) such as in:			<slc:fileURI rdf:resource="file:///Users/fps/Sites/fps" />		and must point to an existing (and writable) directory	-->	<!--		WebServerMappings		One way to declare the mapping between URI and file on your disk is through "WebServerMappings"		They map URLs of directories (typically served by a web server, but also possibly by semanlink servlet)
		to directories in the file system.	-->		<!--		this mapping is implicit: files inside semanlink's main data directory (the one defined in the semanlinkDataDir param of the context)		can be served by the semanlink servlet.		(remember that about="" relates to the URL of the semanlink servlet, as this file is loaded with base equal		to url of servlet)		-->	<slc:WebServerMapping rdf:about="">		<slc:pathRelativeToDataDir></slc:pathRelativeToDataDir>	</slc:WebServerMapping>	<!--		If you use a web server, you'll probably have a mapping such as this one:		(this example corresponds to the Apache installation on my Macintosh)	-->	<!--	<slc:WebServerMapping rdf:about="http://127.0.0.1/~fps/">		<slc:filePath>/Users/fps/Sites/</slc:filePath>	</slc:WebServerMapping>	-->	<!--	SLMODELS	NOTE : currently, Semanlink servlet supports only one SLModel.	It MUST be declared and defined here inside the tag <sl:SLModel rdf:about="">	A SLModel has two main parts:	- thesauri (definition of tags)	- metadata about documents (either files, bookmarks or text notes written in Semanlink)		Thesauri are of class sl:Thesaurus.	Thesauri used in a SLModel are declared through its their :defaultThesaurus and slc:thesaurus properties.	slc:defaultThesaurus is a functional property (one and only one value for a SLModel)	slc:thesaurus is used when you want to use more thesauri.		Metadata about documents is stored in files called "sl.rdf" located in directories near the files they describe.	Values of slc:dataFolder property of a SLModel, (instances of sl:DataFolder), are used to declare the root directories	containing such metadata files. These directories are searched at startup for the the "sl.rdf" files they contain,	in order to have these files loaded into memory. See description of sl:DataFolder to learn more:		ABOUT sl:DataFolder	<sl:DataFolder> is a resource supposed to be a directory. It is from these directories that metadata about documents	(resources that have been "semanlinked") is loaded at startup, and it is in these directories that metadata is saved	when you add tags (or other metadata) to documents (when you "semanlink" a document, bookmark etc.)	Metadata is stored in files called "sl.rdf".	One or several "sl.rdf" files inside this directory are loaded at startup, (and are used to save metadata),	depending on the value of the "slc:loadingMode" property. On this property depends also where exactly metadata	about a given document get saved.		An important feature is that you can move or copy a sl:DataFolder without problems: the metadata uses relative URIs.		Where is saved metadata about a document ? The general principle is as follows:		- When metadata is added to a file that is located inside a sl:DataFolder, the metadata is saved in	a "sl.rdf" file that is typically located in the same directory as the file itself. For instance,	metadata about dataFolder/2006/06/foo.html will be saved in dataFolder/2006/06/sl.rdf (details and exceptions below)	- when metadata is added to a file that does not belong to a sl:DataFolder,	or when metadata is added to an URL that is not served by your web server (as defined by the sl:WebServerMapping),	the metadata gets saved in a sl.rdf file located inside the sl:DataFolder that is the sl:defaultDataFolder of the SLModel.	The sl:creationDate property of the document (that gets automatically documented when metadata is added to a given document	for the first time) is used to define in which subdirectory of the sl:defaultDataFolder (a subdirectory of the form	defaultDataFolder/yyyy/mm)		Supported values of the "slc:loadingMode" property are:	- empty: all files with short name "sl.rdf" inside the directory and any of its descendants get loaded.	When saving metadata about a file inside this directory, the metadata is written in the sl.rdf file	located in the same directory as the file itself.	For instance, metadata about dataFolder/a/b/c/d/foo.html is saved in dataFolder/a/b/c/d/sl.rdf	This way, any subdirectory of dataFolder can be moved and all the included metadata remains valid.	The drawback is that the complete hierarchy of files must be scaned at startup, looking for a potentially	huge number of small sl.rdf files.	- simple: all metadata is in only one "sl.rdf" file at first level of directory
	- "depth2": only 2 levels of subdirectories of dataFolder are searched for "sl.rdf" files.	In this case, metadata about dataFolder/a/b/c/d/foo.html is saved in dataFolder/a/b/sl.rdf	(and the statements look like: <rdf:Description rdf:about="c/d/foo.html">...)	- "yearSub": identical to depth2, except that, at the first level, only directories	whose name is a numeric value (ex 2005) are searched	for sl.rdf files.	For instance, metadata about dataFolder/2005/b/c/d/foo.html gets saved in dataFolder/2005/b/sl.rdf	but metadata about dataFolder/a/b/d/foo.html gets saved in dataFolder/yyyy/mm/sl.rdf, yyyy/mm corresponding to the "sl:creationDate"	property of the document.	- "yearMonth": names of subdirectories of level 1 and 2 must be numeric to be searched for "sl.rdf" files	For instance, metadata about dataFolder/2005/10/c/d/foo.html gets saved in dataFolder/2005/10/sl.rdf	but metadata about dataFolder/2005/b/c/d/foo.html gets saved in dataFolder/yyyy/mm/sl.rdf, yyyy/mm corresponding to the "sl:creationDate"	property of the document.		<slc:thesaurus> is the thesaurus to be used when adding tags to a document (by giving only its label).	(If <slc:thesaurus> is not defined, default thesaurus is used).	-->	<sl:SLModel rdf:about="">		<!-- THESAURI -->		<!--		One can use several semanlink thesauri (set of tags) to add metadata to documents.		These thesauri must be declared here. URI and file path must be provided.		Tag with short id tagId of thesaurus thesaurusUri has a page served by semanlink servlet at address:		[url of servlet]/tag/?uri=[urlencoded form of (thesaurusUri/tagId)]				You MUST define a thesaurus which is used by default.		In addition to the url given above, the shorter form:		[url of servlet]/tag/[tagId]		can be used to get the page about a tag in the default thesaurus		(and this form is used by the application)		The default thesaurus has therefore a natural URI, which is [url of servlet]/tag		You may define another URI for this default thesaurus. In this case, this URI is used when saving metadata about documents		(in the "sl.rdf" files)				You MUST give an EXISTING DIRECTORY as value of sl:filePath		(not if you're using sl:pathRelativeToDataDir)		Two different thesauri MUST have different directories.		-->		<slc:defaultThesaurus>			<sl:Thesaurus rdf:about="tag">				<slc:pathRelativeToDataDir>tags</slc:pathRelativeToDataDir>			</sl:Thesaurus>		</slc:defaultThesaurus>		<!-- example of declaration of another thesaurus -->		<!--		<slc:thesaurus>			<sl:Thesaurus rdf:about="http://www.yourdomain.com/thesaurus2">				<slc:filePath>/path/to/existingdir</slc:filePath>				<slc:oldUri rdf:resource="http://www.olddomain.com/thesaurus"/>			</sl:Thesaurus>		</slc:thesaurus>				-->		<!-- DATA FOLDERS -->		<!-- DEFAULT DATA FOLDER -->		<!-- The DataFolder used by default.		Defined here to be located inside the "documents" subdirectory of the main "dataDir"		to store metadata in "yyyy/mm" subdirectories only,		and to use by default the default Thesaurus.		The uri servletURL/document can be used, as the servlet is configured to serve static files at this address.		(and there SHOULD be a DataFolder with that uri, if you want to serve static files through the servlet.		Such a DataFolder is not needed if all files are served by a web server		Note that file protocol uris are not an option, even if you run semanlink only on localhost:		most web browsers deny access to a file protocol uri from a page served by a server,		even if server is running at localhost )		-->		<slc:defaultDataFolder>			<sl:DataFolder rdf:about="document">				<slc:pathRelativeToDataDir>documents</slc:pathRelativeToDataDir>				<slc:loadingMode>yearMonth</slc:loadingMode>			</sl:DataFolder>		</slc:defaultDataFolder>				<!--  		Including this property is the way to store bookmarks in a separate directory.		(If you don't include it, bookmarks will be stored in the default DataFolder)		-->		<slc:bookmarkFolder>			<!--  			Including this property is the way to store bookmarks in a separate directory						can be anonymous (uri of this res is not used, anyway) 
						having "absoluteBase" in loadingMode (meaning that base is thesaurusUri)
			probably not needed anymore (systematically the case for bookmarkFolder, see class SemanlinkConfig)
			-->			<sl:DataFolder>				<slc:pathRelativeToDataDir>bookmarks</slc:pathRelativeToDataDir>				<slc:loadingMode>yearMonth absoluteBase</slc:loadingMode>			</sl:DataFolder>		</slc:bookmarkFolder>				<!--		NOTES		One special DataFolder is used to store the text notes that you can create in Semanlink.		As usual, the directory MUST exist if located using sl:filePath		It may NOT be the same directory as any of the other data folders (must be dedicated to store notes only)		(You may notice it is an anonymous resource: no "rdf:about" in the <sl:DataFolder> tag)		EN FAIT semanlink/note(s???)/...		-->		<slc:notesFolder>			<sl:DataFolder>				<slc:pathRelativeToDataDir>notes</slc:pathRelativeToDataDir>				<slc:loadingMode>yearMonth</slc:loadingMode>			</sl:DataFolder>		</slc:notesFolder>				<!-- OTHER DATA FOLDERS -->
		
		!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!				<!-- Example of an other DataFolder,		that would use another thesaurus as default.		Beware:		1 the thesaurus MUST be declared among the sl:thesaurus properties of the SLModel, see above		2 You MUST add to web.xml the following servlet-mapping:			<servlet-mapping>				<servlet-name>StaticFileServlet</servlet-name>				<url-pattern>/test/*</url-pattern>			</servlet-mapping>		in order to have the files inside /path/to/existing/directory served by the servlet at url /semanlink/test/path/to/existing/directory		This states indeed that files inside directory "/path/to/existing/directory" can be accessed at url /semanlink/test/path/to/existing/directory		(CECI, DEPUIS QU'ON FAIT UN AJOUT AUTOMATIQUE A WebServer		SI ON n4AVAIT PAS FAIT CET AJOIUT AUTOMATIQUE, ON AURAIT UN ACCES DE TYPE FILE		Otherwise, a file protocol url will be attributed to those files, and you will have problems to access		them from most browsers (they won't let you access a file-protocol url from a page generated by a servlet,		even when it is running on localhost.)				An alternative is to use for rdf:about something such as rdf:about="documents/test"		(because there is already a mapping 			<servlet-mapping>				<servlet-name>StaticFileServlet</servlet-name>				<url-pattern>/documents/*</url-pattern>			</servlet-mapping>		in web.xml				LE MIEUX DONC EST D4IMPOSER D'AVOI DES about en documents/			mais attention, on ne pourra pas avoir un fichier commencant par ce qu'on met dans about			dans le default folder !!!!					On peut mettre un rdf:about de protocol file, avec les ennuis qu'on connait				If you're running a webserver and the directory is served by the webserver,		use the uri of the directory 		-->		<!--		<slc:dataFolder>			<sl:DataFolder rdf:about="documents/test">				<slc:loadingMode>yearMonth</slc:loadingMode>				<slc:filePath>/path/to/existing/directory</slc:filePath>				<slc:thesaurus rdf:resource="http://www.yourdomain.com/thesaurus2"/>			</sl:DataFolder>		</slc:dataFolder>		-->	</sl:SLModel>		<!--	APPLICATION PARAMS	anonymous resource used to define some parameters of the application	(default values, ...)	-->	<slc:ApplicationParams>		<!-- if connection to internet goes through a proxy -->
		<slc:proxyHost></slc:proxyHost>
		<slc:proxyPort></slc:proxyPort>
		<slc:proxyUserName></slc:proxyUserName>
		<slc:proxyPassword></slc:proxyPassword>
		<!-- sort property used by default. If not documented, sl:creationTime -->
		<slc:defaultSortProperty rdf:resource="http://www.semanlink.net/2001/00/semanlink-schema#creationTime"/>
		<!-- date property used by default. If not documented, sl:creationDate -->
		<slc:defaultDateProperty rdf:resource="http://www.semanlink.net/2001/00/semanlink-schema#creationDate"/>
		<!-- is editing allowed by default? -->		<slc:editorByDefault>true</slc:editorByDefault>		<!-- URL of logon page (either obsolute or relative to semanlink servlet) (used only when !editorByDefault)  -->		<slc:logonPage rdf:resource="" />		<!-- Tags that should not be considered as tags during automatic metadata extraction -->		<slc:metadataExtractionBlackListed>http</slc:metadataExtractionBlackListed>		<!-- value used by the bookmarklet, in case your web site uses a page with html frames: 		name of the main frame (leave "" or not documented if frames are not used). -->		<slc:mainFrame></slc:mainFrame>		<!--  -->		<slc:trace>true</slc:trace>	</slc:ApplicationParams></rdf:RDF>